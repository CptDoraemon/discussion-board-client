{"version":3,"sources":["theme.tsx","components/header/button.tsx","components/header/header.tsx","components/post-list/post-list.tsx","components/login/login.tsx","components/login/register.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","contrastText","secondary","typography","responsiveFontSizes","h1","fontFamily","join","fontWeight","fontSize","breakpoints","up","useStyles","makeStyles","button","backgroundColor","color","textTransform","letterSpacing","borderBottom","borderRadius","margin","padding","Button","text","url","classes","variant","root","disableElevation","href","headerDimension","width","height","position","left","top","placeholder","Header","className","Grid","container","alignItems","justify","item","xs","to","Typography","component","Box","textAlign","PostList","Login","Register","maxWidth","display","flexDirection","justifyContent","widthWrapper","App","ThemeProvider","CssBaseline","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.08a85261.chunk.js","sourcesContent":["import {createMuiTheme, responsiveFontSizes} from \"@material-ui/core/styles\";\n\nlet theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#805ad5',\n            contrastText: '#fff',\n        },\n        secondary: {\n            main: '#f6ad55',\n            contrastText: '#fff',\n        },\n    },\n    typography: {\n        \"fontFamily\": \"system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji\",\n        \"fontSize\": 14,\n        \"fontWeightLight\": 300,\n        \"fontWeightRegular\": 400,\n        \"fontWeightMedium\": 500\n    }\n});\ntheme = responsiveFontSizes(theme);\ntheme.typography.h1 = {\n    fontFamily: [\n        'Open-sans',\n        'sans-serif',\n    ].join(','),\n    fontWeight: 800,\n    fontSize: '1.25rem',\n    [theme.breakpoints.up('md')]: {\n        fontSize: '1.5rem',\n    },\n    fontStyle: \"normal\",\n    color: \"inherit\"\n};\n\nexport default theme;","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Button as MuiButton} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        backgroundColor: 'rgba(255,255,255,0.3)',\n        color: '#fff',\n        fontWeight: 700,\n        textTransform: 'capitalize',\n        letterSpacing: 'inherit',\n        borderBottom: '2px solid rgba(0,0,0,0.1)',\n        borderRadius: '5px',\n        margin: '0 4px',\n        padding: '4px 10px',\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface ButtonProps {\n    text: string,\n    url: string\n}\n\nconst Button: React.FC<ButtonProps> = ({text, url}) => {\n    const classes = useStyles();\n\n    return (\n        <MuiButton variant=\"contained\" classes={{root: classes.button}} disableElevation href={url}>\n            { text }\n        </MuiButton>\n    )\n};\n\nexport default Button","import React from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Box, Grid, Typography} from \"@material-ui/core\";\nimport Button from \"./button\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    headerDimension: {\n        width: '100%',\n        height: '80px',\n    },\n    root: {\n        backgroundColor: theme.palette.primary.main,\n        position: 'fixed',\n        left: 0,\n        top: 0,\n        color: theme.palette.primary.contrastText\n    },\n    placeholder: {\n        position: 'relative',\n    },\n    button: {\n        backgroundColor: 'rgba(255,255,255,0.5)',\n        color: '#fff',\n        fontWeight: 700,\n        textTransform: 'capitalize',\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main\n        }\n    }\n}));\n\n\nconst Header: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={`${classes.placeholder} ${classes.headerDimension}`}>\n            <Grid container alignItems={\"center\"} justify={\"center\"} className={`${classes.root} ${classes.headerDimension}`}>\n                <Grid item xs={4}>\n                    <Link to={'/'}>\n                        <Typography variant={'h1'} component={'h1'}>\n                            <Box fontWeight={700} textAlign={\"center\"}>\n                                Blog | XiaoxiHome\n                            </Box>\n                        </Typography>\n                    </Link>\n                </Grid>\n                <Grid item xs={4}>\n\n                </Grid>\n                <Grid item xs={4}>\n                    <Button text={'Join'} url={'/register'}/>\n                    <Button text={'Login'} url={'/login'}/>\n                </Grid>\n            </Grid>\n        </div>\n    )\n};\n\n\n\nexport default Header;\n","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n\n}));\n\ninterface PostListProps {\n\n}\n\nconst PostList: React.FC<PostListProps> = () => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            post list\n        </div>\n    )\n};\n\nexport default PostList","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n\n}));\n\ninterface LoginProps {\n\n}\n\nconst Login: React.FC<LoginProps> = () => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            login\n        </div>\n    )\n};\n\nexport default Login","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n\n}));\n\ninterface RegisterProps {\n\n}\n\nconst Register: React.FC<RegisterProps> = () => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            register\n        </div>\n    )\n};\n\nexport default Register","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useRouteMatch,\n    useParams\n} from \"react-router-dom\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport {makeStyles, ThemeProvider} from '@material-ui/core/styles';\nimport theme from './theme';\nimport Header from \"./components/header/header\";\nimport PostList from \"./components/post-list/post-list\";\nimport Login from \"./components/login/login\";\nimport Register from \"./components/login/register\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: '100vw',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'flex-start'\n    },\n    widthWrapper: {\n        width: '1000px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'flex-start'\n    }\n}));\n\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div className={classes.root}>\n                <Router>\n                <Header />\n                    <div className={classes.widthWrapper}>\n                        <Switch>\n                            <Route path=\"/\" exact render={ () => <PostList /> } />\n                            <Route path=\"/login\" render={ () => <Login /> } />\n                            <Route path=\"/register\" render={ () => <Register /> } />\n                        </Switch>\n                    </div>\n                </Router>\n            </div>\n        </ThemeProvider>\n    )\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}