{"version":3,"sources":["theme.tsx","components/commons/theme-button.tsx","components/header/header.tsx","components/post-list/post-list.tsx","utils/use-full-height.tsx","components/login/commons/login-common.tsx","components/commons/form-button.tsx","utils/use-input-field.tsx","utils/validators.ts","requests/urls.ts","requests/useLogin.tsx","components/login/commons/error-message.tsx","components/login/login.tsx","components/login/register.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","contrastText","secondary","text","typography","responsiveFontSizes","h1","fontFamily","join","fontWeight","fontSize","breakpoints","up","useStyles","makeStyles","button","backgroundColor","color","textTransform","letterSpacing","borderBottom","borderRadius","margin","padding","ThemeButton","url","classes","variant","root","disableElevation","component","Link","to","headerDimension","width","height","position","left","top","placeholder","Header","className","Grid","container","alignItems","justify","item","xs","Typography","Box","textAlign","PostList","useFullHeight","ref","useState","setHeight","useEffect","current","getBoundingClientRect","spacing","display","flexDirection","justifyContent","image","objectFit","down","content","textField","link","LoginCommon","children","imageUrl","containerRef","useRef","Paper","elevation","src","process","alt","style","title","opacity","FormButton","onClick","disabled","useInputField","defaultValue","validator","value","setValue","error","setError","errorMessage","setErrorMessage","e","target","validatorResult","isValid","message","emailValidator","indexOf","length","passwordValidator","urls","login","accountBase","useLogin","loading","setLoading","history","useHistory","location","useLocation","email","password","validators","validationResults","map","_","i","fetch","method","headers","body","JSON","stringify","then","res","json","status","console","log","from","state","pathname","replace","catch","ErrorMessage","CircularProgress","Login","setEmail","emailError","emailErrorMessage","validateEmail","setPassword","passwordError","passwordErrorMessage","validatePassword","TextField","label","name","onChange","helperText","type","Divider","Register","md","maxWidth","widthWrapper","App","ThemeProvider","CssBaseline","basename","path","exact","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAEIA,EAAQC,YAAe,CACvBC,QAAS,CACLC,QAAS,CACLC,KAAM,UACNC,aAAc,QAElBC,UAAW,CACPF,KAAM,UACNC,aAAc,QAElBE,KAAM,CACFJ,QAAS,YAGjBK,WAAY,CACR,WAAc,yKACd,SAAY,GACZ,gBAAmB,IACnB,kBAAqB,IACrB,iBAAoB,QAG5BR,EAAQS,YAAoBT,IACtBQ,WAAWE,IAAjB,GACIC,WAAY,CACR,YACA,cACFC,KAAK,KACPC,WAAY,IACZC,SAAU,WANd,cAOKd,EAAMe,YAAYC,GAAG,MAAQ,CAC1BF,SAAU,WARlB,0BAUe,UAVf,sBAWW,WAXX,GAced,Q,oCClCTiB,EAAYC,aAAW,SAAClB,GAAD,MAAY,CACrCmB,OAAQ,CACJC,gBAAiB,wBACjBC,MAAO,OACPR,WAAY,IACZS,cAAe,aACfC,cAAe,UACfC,aAAc,4BACdC,aAAc,MACdC,OAAQ,QACRC,QAAS,WACT,UAAW,CACPP,gBAAiBpB,EAAME,QAAQI,UAAUF,WAoBtCwB,EAV4B,SAAC,GAAiB,IAAhBrB,EAAe,EAAfA,KAAMsB,EAAS,EAATA,IACzCC,EAAUb,IAEhB,OACI,kBAAC,IAAD,CAAWc,QAAQ,YAAYD,QAAS,CAACE,KAAMF,EAAQX,QAASc,kBAAgB,EAACC,UAAWC,IAAMC,GAAIP,GAChGtB,IC1BRU,EAAYC,aAAW,SAAClB,GAAD,MAAY,CACrCqC,gBAAiB,CACbC,MAAO,OACPC,OAAQ,QAEZP,KAAM,CACFZ,gBAAiBpB,EAAME,QAAQC,QAAQC,KACvCoC,SAAU,QACVC,KAAM,EACNC,IAAK,EACLrB,MAAOrB,EAAME,QAAQC,QAAQE,cAEjCsC,YAAa,CACTH,SAAU,YAEdrB,OAAQ,CACJC,gBAAiB,wBACjBC,MAAO,OACPR,WAAY,IACZS,cAAe,aACf,UAAW,CACPF,gBAAiBpB,EAAME,QAAQI,UAAUF,WAmCtCwC,EA7BU,WACrB,IAAMd,EAAUb,IAEhB,OACI,yBAAK4B,UAAS,UAAKf,EAAQa,YAAb,YAA4Bb,EAAQO,kBAC9C,kBAACS,EAAA,EAAD,CAAMC,WAAS,EAACC,WAAY,SAAUC,QAAS,SAAUJ,UAAS,UAAKf,EAAQE,KAAb,YAAqBF,EAAQO,kBAC3F,kBAACS,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACX,kBAAC,IAAD,CAAMf,GAAI,KACN,kBAACgB,EAAA,EAAD,CAAYrB,QAAS,KAAMG,UAAW,MAClC,kBAACmB,EAAA,EAAD,CAAKxC,WAAY,IAAKyC,UAAW,UAAjC,wBAMZ,kBAACR,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IAGf,kBAACL,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAa5C,KAAM,OAAQsB,IAAK,cAChC,kBAAC,EAAD,CAAatB,KAAM,QAASsB,IAAK,eClD/CZ,EAAYC,aAAW,SAAClB,GAAD,MAAY,MAkB1BuD,EAV2B,WACtBtC,IAEhB,OACI,2C,iBCFOuC,EAXO,SAACC,GAA0C,IAAD,EAChCC,mBAAS,GADuB,mBACrDnB,EADqD,KAC7CoB,EAD6C,KAQ5D,OALAC,qBAAU,WACDH,EAAII,SACTF,EAAUF,EAAII,QAAQC,wBAAwBvB,UAC/C,CAACkB,IAEGlB,GCLLtB,EAAYC,aAAW,SAAClB,GAAD,MAAY,CACrCgC,KAAM,CACFM,MAAO,OACPZ,OAAQ1B,EAAM+D,QAAQ,EAAG,GACzBC,QAAS,OACTC,cAAe,MACfjB,WAAY,SACZkB,eAAgB,UAEpBC,MAAM,aACF7B,MAAO,MACPC,OAAQ,OACR,QAAS,CACLD,MAAO,OACPC,OAAQ,OACR6B,UAAW,UAEdpE,EAAMe,YAAYsD,KAAK,MAAQ,CAC5BL,QAAQ,SAGhBM,QAAQ,aACJhC,MAAO,MACPX,QAAS3B,EAAM+D,QAAQ,GAAI,IAC1B/D,EAAMe,YAAYsD,KAAK,MAAQ,CAC5B/B,MAAO,SAGfiC,UAAW,CACPjC,MAAO,OACPzB,WAAY,KAEhB2D,KAAM,CACF3D,WAAY,IACZ,WAAY,CACRQ,MAAOrB,EAAME,QAAQC,QAAQC,MAEjC,cAAe,CACXiB,MAAOrB,EAAME,QAAQC,QAAQC,MAEjC,YAAa,CACTiB,MAAOrB,EAAME,QAAQI,UAAUF,WAgC5BqE,EAvBiC,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAClD7C,EAAUb,IAEV2D,EAAeC,iBAAuB,MACtCtC,EAASiB,EAAcoB,GAE7B,OACI,kBAACE,EAAA,EAAD,CAAOC,UAAW,EAAGlC,UAAWf,EAAQE,KAAMyB,IAAKmB,GAC/C,yBAAK/B,UAAWf,EAAQqC,OACpB,yBACIa,IAAKC,2BAAyBN,EAC9BO,IAAK,mBACLC,MAAO,CAAC5C,OAAO,GAAD,OAAKA,EAAL,OACd6C,MAAO,sBAGf,yBAAKvC,UAAWf,EAAQwC,SAClBI,K,kBCnEZzD,EAAYC,aAAW,SAAClB,GAAD,MAAY,CACrCmB,OAAQ,CACJmB,MAAO,OACPlB,gBAAiBpB,EAAME,QAAQC,QAAQC,KACvCiB,MAAO,OACPR,WAAY,IACZS,cAAe,OACfE,aAAc,4BACdC,aAAc,MACd,UAAW,CACPL,gBAAiBpB,EAAME,QAAQI,UAAUF,MAE7C,aAAc,CACVgB,gBAAiBpB,EAAME,QAAQI,UAAUF,KACzCiF,QAAS,SAqBNC,EAV2B,SAAC,GAA+B,IAA9B/E,EAA6B,EAA7BA,KAAMgF,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SACjD1D,EAAUb,IAEhB,OACI,kBAAC,IAAD,CAAWc,QAAQ,YAAYD,QAAS,CAACE,KAAMF,EAAQX,QAASc,kBAAgB,EAACsD,QAASA,EAASC,SAAUA,GACvGjF,ICPCkF,EAxBO,SAClBC,EACAC,GACE,IAAD,EACyBjC,mBAASgC,GADlC,mBACME,EADN,KACaC,EADb,OAEyBnC,oBAAS,GAFlC,mBAEMoC,EAFN,KAEaC,EAFb,OAGuCrC,mBAAS,IAHhD,mBAGMsC,EAHN,KAGoBC,EAHpB,KAkBD,MAAO,CAACL,EAL6B,SAACM,GAC9BJ,GAAOC,GAAS,GACpBF,EAASK,EAAEC,OAAOP,QAGQE,EAAOE,EAbpB,WACb,IAAMI,EAAkBT,EAAUC,GAIlC,OAHAG,GAAUK,EAAgBC,SAC1BJ,EAAgBG,EAAgBE,SAEzBF,EAAgBC,WCfzBE,EAA4B,SAACX,GAC/B,IAAIS,GAAU,EACVC,EAAU,uBAad,OAX4B,IAAxBV,EAAMY,QAAQ,OAEiB,IAAxBZ,EAAMY,QAAQ,OAEG,IAAjBZ,EAAMa,OACbH,EAAU,yBAEVD,GAAU,EACVC,EAAU,KAGP,CACHD,UACAC,YAIFI,EAA+B,SAACd,GAClC,IAAIS,GAAU,EACVC,EAAU,GASd,OAPqB,IAAjBV,EAAMa,OACNH,EAAU,yBAEVD,GAAU,EACVC,EAAU,IAGP,CACHD,UACAC,YC3BOK,EAJF,CACTC,MAHUC,mFC8DCC,EA7DE,WAAO,IAAD,EACWpD,oBAAS,GADpB,mBACZqD,EADY,KACHC,EADG,OAEOtD,oBAAS,GAFhB,mBAEZoC,EAFY,KAELC,EAFK,OAGqBrC,mBAAS,IAH9B,mBAGZsC,EAHY,KAGEC,EAHF,KAIfgB,EAAUC,cACVC,EAAWC,cAoDf,MAAO,CAACL,EAASjB,EAAOE,EAlDV,SACVqB,EACAC,EACAC,GAGAxB,GAAS,GACTE,EAAgB,IAIhB,IADA,IAAMuB,EAAoBD,EAAWE,KAAI,SAAAC,GAAC,OAAIA,OACrCC,EAAE,EAAGA,EAAEH,EAAkBf,OAAQkB,IACtC,IAAKH,EAAkBG,GACnB,OAKRX,GAAW,GACXY,MAAMjB,EAAKC,MAAO,CACdiB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBZ,QACAC,eAGHY,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAE,GAEF,GADApB,GAAW,GACS,UAAhBoB,EAAKC,OACLtC,GAAS,GACTE,EAAgBmC,EAAK9B,aAClB,CACHgC,QAAQC,IAAIH,GADT,IAGGI,GAAcrB,EAASsB,OAAS,CAAED,KAAM,CAAEE,SAAU,OAApDF,KACNvB,EAAQ0B,QAAQH,OAGvBI,OAAM,SAAA1C,GACHc,GAAW,GAEXjB,GAAS,GACTE,EAAgB,qD,SCrD1BhF,EAAYC,aAAW,SAAClB,GAAD,MAAY,CACrCgG,aAAc,CACVnF,WAAY,IACZQ,MAAOrB,EAAME,QAAQ4F,MAAM1F,UA4BpByI,EAjBkC,SAAC,GAAoC,IAAnC9B,EAAkC,EAAlCA,QAASf,EAAyB,EAAzBA,aAAcF,EAAW,EAAXA,MAChEhE,EAAUb,IAEhB,OACI,kBAACmC,EAAA,EAAD,CAAYrB,QAAS,QAASG,UAAW,OACrC,kBAACmB,EAAA,EAAD,CAAKR,UAAWf,EAAQkE,aAAczD,OAAQ,IACtCwE,EACI,kBAAC+B,EAAA,EAAD,CAAkBzH,MAAM,YACxByE,GAASE,EACLA,EACA,OCjBtB/E,EAAYC,aAAW,SAAClB,GAAD,MAAY,CACrCuE,UAAW,CACPjC,MAAO,OACPzB,WAAY,KAEhB2D,KAAM,CACF3D,WAAY,IACZ,WAAY,CACRQ,MAAOrB,EAAME,QAAQC,QAAQC,MAEjC,cAAe,CACXiB,MAAOrB,EAAME,QAAQC,QAAQC,MAEjC,YAAa,CACTiB,MAAOrB,EAAME,QAAQI,UAAUF,WA4F5B2I,EAnFqB,WAChC,IAAMjH,EAAUb,IADsB,EAEkCwE,EAAc,GAAIc,GAFpD,mBAE/Bc,EAF+B,KAExB2B,EAFwB,KAEdC,EAFc,KAEFC,EAFE,KAEiBC,EAFjB,OAGiD1D,EAAc,GAAIiB,GAHnE,mBAG/BY,EAH+B,KAGrB8B,EAHqB,KAGRC,EAHQ,KAGOC,EAHP,KAG6BC,EAH7B,OAKQzC,IALR,mBAK/BC,EAL+B,KAKtBjB,EALsB,KAKfE,EALe,KAKDY,EALC,KAWtC,OACI,kBAAC,EAAD,CAAajC,SAAU,wBACnB,kBAAC7B,EAAA,EAAD,CAAMC,WAAS,EAACgB,QAAS,GAErB,kBAACjB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAYrB,QAAS,KAAMG,UAAW,KAAMb,MAAO,eAC/C,kBAACgC,EAAA,EAAD,CAAKC,UAAW,UAAhB,YAMR,kBAACR,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,UACrB,kBAACuG,EAAA,EAAD,CACI1D,MAAOmD,EACPQ,MAAM,QACNC,KAAK,QACL9D,MAAOyB,EACPsC,SAAUX,EACVjH,QAAQ,WACR6H,WAAYX,EAAaC,EAAmB,IAC5CrG,UAAWf,EAAQyC,cAK/B,kBAACzB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,UACrB,kBAACuG,EAAA,EAAD,CACI1D,MAAOuD,EACPQ,KAAK,WACLJ,MAAM,WACN7D,MAAO0B,EACPqC,SAAUP,EACVrH,QAAQ,WACR6H,WAAYP,EAAgBC,EAAuB,IACnDzG,UAAWf,EAAQyC,cAK/B,kBAACzB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,UACrB,kBAAC,EAAD,CAAY1C,KAAM,aAAcgF,QAhD9B,WAClBqB,EAAMS,EAAOC,EAAU,CAAC6B,EAAeI,KA+CiC/D,SAAUuB,MAI1E,kBAACjE,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,UACrB,kBAAC,EAAD,CAAc8D,QAASA,EAASjB,MAAOA,EAAOE,aAAcA,MAIpE,kBAAClD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAAC2G,EAAA,EAAD,OAGJ,kBAAChH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIN,UAAWf,EAAQ0C,MAClC,kBAAC1B,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,UACrB,kBAAC,IAAD,CAAMb,GAAI,aAAV,yBClGlBnB,EAAYC,aAAW,SAAClB,GAAD,MAAY,CACrCuE,UAAW,CACPjC,MAAO,OACPzB,WAAY,KAEhB2D,KAAM,CACF3D,WAAY,IACZ,WAAY,CACRQ,MAAOrB,EAAME,QAAQC,QAAQC,MAEjC,cAAe,CACXiB,MAAOrB,EAAME,QAAQC,QAAQC,MAEjC,YAAa,CACTiB,MAAOrB,EAAME,QAAQI,UAAUF,WAwF5B2J,EA/E2B,WACtC,IAAMjI,EAAUb,IAEhB,OACI,kBAAC,EAAD,CAAa0D,SAAU,2BACnB,kBAAC7B,EAAA,EAAD,CAAMC,WAAS,EAACgB,QAAS,GACrB,kBAACjB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAYrB,QAAS,KAAMG,UAAW,KAAMb,MAAO,eAC/C,kBAACgC,EAAA,EAAD,CAAKC,UAAW,UAAhB,aAKR,kBAACR,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,UACrB,kBAACuG,EAAA,EAAD,CACIC,MAAM,WACN7D,MAAO,GAEP7D,QAAQ,WACRc,UAAWf,EAAQyC,cAI/B,kBAACzB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,UACrB,kBAACuG,EAAA,EAAD,CACIC,MAAM,QACN7D,MAAO,GAEP7D,QAAQ,WACRc,UAAWf,EAAQyC,cAI/B,kBAACzB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAI6G,GAAI,GACnB,kBAAClH,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,UACrB,kBAACuG,EAAA,EAAD,CACIC,MAAM,WACN7D,MAAO,GAEP7D,QAAQ,WACRc,UAAWf,EAAQyC,cAI/B,kBAACzB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAI6G,GAAI,GACnB,kBAAClH,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,UACrB,kBAACuG,EAAA,EAAD,CACIC,MAAM,mBACN7D,MAAO,GAEP7D,QAAQ,WACRc,UAAWf,EAAQyC,cAI/B,kBAACzB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,UACrB,kBAAC,EAAD,CAAY1C,KAAM,UAAYgF,QAAS,kBAAM,GAAOC,UAAU,MAItE,kBAAC1C,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAAC2G,EAAA,EAAD,OAEJ,kBAAChH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIN,UAAWf,EAAQ0C,MAClC,kBAAC1B,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,UACrB,kBAAC,IAAD,CAAMb,GAAI,UAAV,iCCjFlBnB,EAAYC,aAAW,SAAClB,GAAD,MAAY,CACrCgC,KAAM,CACFM,MAAO,OACP2H,SAAU,QACVjG,QAAS,OACTC,cAAe,SACfjB,WAAY,SACZkB,eAAgB,cAEpBgG,aAAa,aACT5H,MAAO,SACP0B,QAAS,OACTC,cAAe,SACfjB,WAAY,SACZkB,eAAgB,cACflE,EAAMe,YAAYsD,KAAK,MAAQ,CAC5B/B,MAAO,aA6BJ6H,EAvBO,WAClB,IAAMrI,EAAUb,IAChB,OACI,kBAACmJ,EAAA,EAAD,CAAepK,MAAOA,GAClB,kBAACqK,EAAA,EAAD,MACA,yBAAKxH,UAAWf,EAAQE,MACpB,kBAAC,IAAD,CAAQsI,SAAUrF,4BAClB,kBAAC,EAAD,MACI,yBAAKpC,UAAWf,EAAQoI,cACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOK,KAAK,IAAIC,OAAK,EAACC,OAAS,kBAAM,kBAAC,EAAD,SACrC,kBAAC,IAAD,CAAOF,KAAK,SAASE,OAAS,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAOF,KAAK,YAAYE,OAAS,kBAAM,kBAAC,EAAD,eCvC/CC,QACW,cAA7BC,OAAOxD,SAASyD,UAEe,UAA7BD,OAAOxD,SAASyD,UAEhBD,OAAOxD,SAASyD,SAASC,MACvB,2DCZNC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEd1C,OAAM,SAAA9C,GACLwC,QAAQxC,MAAMA,EAAMQ,c","file":"static/js/main.07422e24.chunk.js","sourcesContent":["import {createMuiTheme, responsiveFontSizes} from \"@material-ui/core/styles\";\n\nlet theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#805ad5',\n            contrastText: '#fff',\n        },\n        secondary: {\n            main: '#f6ad55',\n            contrastText: '#fff',\n        },\n        text: {\n            primary: '#4a5568'\n        }\n    },\n    typography: {\n        \"fontFamily\": \"system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji\",\n        \"fontSize\": 14,\n        \"fontWeightLight\": 300,\n        \"fontWeightRegular\": 400,\n        \"fontWeightMedium\": 500\n    }\n});\ntheme = responsiveFontSizes(theme);\ntheme.typography.h1 = {\n    fontFamily: [\n        'Open-sans',\n        'sans-serif',\n    ].join(','),\n    fontWeight: 800,\n    fontSize: '1.25rem',\n    [theme.breakpoints.up('md')]: {\n        fontSize: '1.5rem',\n    },\n    fontStyle: \"normal\",\n    color: \"inherit\"\n};\n\nexport default theme;","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Button as MuiButton} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        backgroundColor: 'rgba(255,255,255,0.3)',\n        color: '#fff',\n        fontWeight: 700,\n        textTransform: 'capitalize',\n        letterSpacing: 'inherit',\n        borderBottom: '2px solid rgba(0,0,0,0.1)',\n        borderRadius: '5px',\n        margin: '0 4px',\n        padding: '4px 10px',\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface ButtonProps {\n    text: string,\n    url: string\n}\n\nconst ThemeButton: React.FC<ButtonProps> = ({text, url}) => {\n    const classes = useStyles();\n\n    return (\n        <MuiButton variant=\"contained\" classes={{root: classes.button}} disableElevation component={Link} to={url}>\n            { text }\n        </MuiButton>\n    )\n};\n\nexport default ThemeButton\n","import React from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Box, Grid, Typography} from \"@material-ui/core\";\nimport ThemeButton from \"../commons/theme-button\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    headerDimension: {\n        width: '100%',\n        height: '80px',\n    },\n    root: {\n        backgroundColor: theme.palette.primary.main,\n        position: 'fixed',\n        left: 0,\n        top: 0,\n        color: theme.palette.primary.contrastText\n    },\n    placeholder: {\n        position: 'relative',\n    },\n    button: {\n        backgroundColor: 'rgba(255,255,255,0.5)',\n        color: '#fff',\n        fontWeight: 700,\n        textTransform: 'capitalize',\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main\n        }\n    }\n}));\n\n\nconst Header: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={`${classes.placeholder} ${classes.headerDimension}`}>\n            <Grid container alignItems={\"center\"} justify={\"center\"} className={`${classes.root} ${classes.headerDimension}`}>\n                <Grid item xs={4}>\n                    <Link to={'/'}>\n                        <Typography variant={'h1'} component={'h1'}>\n                            <Box fontWeight={700} textAlign={\"center\"}>\n                                Blog | XiaoxiHome\n                            </Box>\n                        </Typography>\n                    </Link>\n                </Grid>\n                <Grid item xs={4}>\n\n                </Grid>\n                <Grid item xs={4}>\n                    <ThemeButton text={'Join'} url={'/register'}/>\n                    <ThemeButton text={'Login'} url={'/login'}/>\n                </Grid>\n            </Grid>\n        </div>\n    )\n};\n\n\n\nexport default Header;\n","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n\n}));\n\ninterface PostListProps {\n\n}\n\nconst PostList: React.FC<PostListProps> = () => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            post list\n        </div>\n    )\n};\n\nexport default PostList","import React, {useEffect, useState} from \"react\";\n\nconst useFullHeight = (ref: React.RefObject<HTMLDivElement>) => {\n    const [height, setHeight] = useState(0);\n\n    useEffect(() => {\n        if (!ref.current) return;\n        setHeight(ref.current.getBoundingClientRect().height)\n    }, [ref]);\n\n    return height\n};\n\nexport default useFullHeight","import React, {useRef} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Paper} from \"@material-ui/core\";\nimport useFullHeight from \"../../../utils/use-full-height\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        margin: theme.spacing(5, 0),\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    image: {\n        width: '40%',\n        height: '100%',\n        '& img': {\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover'\n        },\n        [theme.breakpoints.down('sm')]: {\n            display:'none'\n        }\n    },\n    content: {\n        width: '60%',\n        padding: theme.spacing(10, 5),\n        [theme.breakpoints.down('sm')]: {\n            width: '100%'\n        }\n    },\n    textField: {\n        width: '100%',\n        fontWeight: 700\n    },\n    link: {\n        fontWeight: 700,\n        '& a:link': {\n            color: theme.palette.primary.main\n        },\n        '& a:visited': {\n            color: theme.palette.primary.main\n        },\n        '& a:hover': {\n            color: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface LoginCommonProps {\n    imageUrl: string\n}\n\nconst LoginCommon: React.FC<LoginCommonProps> = ({children, imageUrl}) => {\n    const classes = useStyles();\n\n    const containerRef = useRef<HTMLDivElement>(null);\n    const height = useFullHeight(containerRef);\n\n    return (\n        <Paper elevation={0} className={classes.root} ref={containerRef}>\n            <div className={classes.image}>\n                <img\n                    src={process.env.PUBLIC_URL + imageUrl}\n                    alt={'login background'}\n                    style={{height: `${height}px`}}\n                    title={'login background'}\n                />\n            </div>\n            <div className={classes.content}>\n                { children }\n            </div>\n        </Paper>\n    )\n};\n\nexport default LoginCommon","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Button as MuiButton} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        width: '100%',\n        backgroundColor: theme.palette.primary.main,\n        color: '#fff',\n        fontWeight: 700,\n        textTransform: 'none',\n        borderBottom: '2px solid rgba(0,0,0,0.1)',\n        borderRadius: '5px',\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main\n        },\n        '&:disabled': {\n            backgroundColor: theme.palette.secondary.main,\n            opacity: 0.7\n        }\n    }\n}));\n\ninterface ButtonProps {\n    text: string,\n    onClick: () => void,\n    disabled: boolean\n}\n\nconst FormButton: React.FC<ButtonProps> = ({text, onClick, disabled}) => {\n    const classes = useStyles();\n\n    return (\n        <MuiButton variant=\"contained\" classes={{root: classes.button}} disableElevation onClick={onClick} disabled={disabled}>\n            { text }\n        </MuiButton>\n    )\n};\n\nexport default FormButton\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\n\ntype ChangeHandler = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void\n\nconst useInputField = (\n    defaultValue: string,\n    validator: (value: string) => {isValid: boolean, message: string}\n) => {\n    const [value, setValue] = useState(defaultValue);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const validate = () => {\n        const validatorResult = validator(value);\n        setError(!validatorResult.isValid);\n        setErrorMessage(validatorResult.message);\n\n        return validatorResult.isValid\n    };\n\n    const changeHandler: ChangeHandler = (e) => {\n        if (error) setError(false);\n        setValue(e.target.value)\n    };\n\n    return [value, changeHandler, error, errorMessage, validate] as [string, ChangeHandler, boolean, string, () => boolean]\n};\n\nexport default useInputField","type Validator = (value: string) => {isValid: boolean, message: string}\n\nconst emailValidator: Validator = (value) => {\n    let isValid = false;\n    let message = 'Invalid Email format';\n\n    if (value.indexOf('@') === -1) {\n\n    } else if (value.indexOf('.') === -1) {\n\n    } else if (value.length === 0) {\n        message = 'Email cannot be empty';\n    } else {\n        isValid = true;\n        message = '';\n    }\n\n    return {\n        isValid,\n        message\n    }\n};\n\nconst passwordValidator: Validator = (value) => {\n    let isValid = false;\n    let message = '';\n\n    if (value.length === 0) {\n        message = 'Email cannot be empty';\n    } else {\n        isValid = true;\n        message = '';\n    }\n\n    return {\n        isValid,\n        message\n    }\n};\n\nexport {\n    emailValidator,\n    passwordValidator\n}","const base = 'https://django-api-xiaoxihome.herokuapp.com/';\n\nconst accountBase = base + 'api/discussion_board/account/';\nconst login = accountBase + 'login/';\n\nconst urls = {\n    login\n};\n\nexport default urls","import {useState} from \"react\";\nimport urls from \"./urls\";\nimport {useHistory, useLocation} from \"react-router-dom\";\n\nconst useLogin = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    let history = useHistory();\n    let location = useLocation();\n\n    const login = (\n        email: string,\n        password: string,\n        validators: (() => boolean)[]\n    ) => {\n        // reset states\n        setError(false);\n        setErrorMessage('');\n\n        // validate inputs\n        const validationResults = validators.map(_ => _());\n        for (let i=0; i<validationResults.length; i++) {\n            if (!validationResults[i]) {\n                return\n            }\n        }\n\n        // start fetching\n        setLoading(true);\n        fetch(urls.login, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email,\n                password\n            })\n        })\n            .then((res) => res.json())\n            .then(json => {\n                setLoading(false);\n                if (json.status === 'error') {\n                    setError(true);\n                    setErrorMessage(json.message)\n                } else {\n                    console.log(json);\n\n                    let { from }: any = location.state || { from: { pathname: \"/\" } };\n                    history.replace(from);\n                }\n            })\n            .catch(e => {\n                setLoading(false);\n\n                setError(true);\n                setErrorMessage('Server unavailable, please try again later.')\n            });\n    };\n\n    return [loading, error, errorMessage, login] as [boolean, boolean, string, typeof login]\n\n};\n\nexport default useLogin","import {Box, CircularProgress, Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    errorMessage: {\n        fontWeight: 700,\n        color: theme.palette.error.main\n    }\n}));\n\ninterface ErrorMessageProps {\n    loading: boolean,\n    error: boolean,\n    errorMessage: string\n\n}\n\nconst ErrorMessage:React.FC<ErrorMessageProps> = ({loading, errorMessage, error}) => {\n    const classes = useStyles();\n\n    return (\n        <Typography variant={'body1'} component={'div'}>\n            <Box className={classes.errorMessage} height={40}>\n                {   loading ?\n                        <CircularProgress color=\"primary\" /> :\n                        error && errorMessage ?\n                            errorMessage :\n                            ' '\n                }\n            </Box>\n        </Typography>\n    )\n};\n\nexport default ErrorMessage","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport LoginCommon from \"./commons/login-common\";\nimport {Box, CircularProgress, Divider, Grid, TextField, Typography} from \"@material-ui/core\";\nimport FormButton from \"../commons/form-button\";\nimport {Link} from \"react-router-dom\";\nimport useInputField from \"../../utils/use-input-field\";\nimport {emailValidator, passwordValidator} from \"../../utils/validators\";\nimport useLogin from \"../../requests/useLogin\";\nimport ErrorMessage from \"./commons/error-message\";\n\nconst useStyles = makeStyles((theme) => ({\n    textField: {\n        width: '100%',\n        fontWeight: 700\n    },\n    link: {\n        fontWeight: 700,\n        '& a:link': {\n            color: theme.palette.primary.main\n        },\n        '& a:visited': {\n            color: theme.palette.primary.main\n        },\n        '& a:hover': {\n            color: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface LoginProps {\n\n}\n\nconst Login: React.FC<LoginProps> = () => {\n    const classes = useStyles();\n    const [email, setEmail, emailError, emailErrorMessage, validateEmail] = useInputField('', emailValidator);\n    const [password, setPassword, passwordError, passwordErrorMessage, validatePassword] = useInputField('', passwordValidator);\n\n    const [loading, error, errorMessage, login] = useLogin();\n\n    const submitHandler = () => {\n        login(email, password, [validateEmail, validatePassword])\n    };\n\n    return (\n        <LoginCommon imageUrl={'/images/login_bg.jpg'}>\n            <Grid container spacing={3}>\n\n                <Grid item xs={12}>\n                    <Typography variant={'h1'} component={'h1'} color={\"textPrimary\"}>\n                        <Box textAlign={'center'}>\n                            Log in\n                        </Box>\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            error={emailError}\n                            label=\"Email\"\n                            name=\"email\"\n                            value={email}\n                            onChange={setEmail}\n                            variant=\"outlined\"\n                            helperText={emailError ? emailErrorMessage: ' '}\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            error={passwordError}\n                            type=\"password\"\n                            label=\"Password\"\n                            value={password}\n                            onChange={setPassword}\n                            variant=\"outlined\"\n                            helperText={passwordError ? passwordErrorMessage : ' '}\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <FormButton text={'Log me in!'} onClick={submitHandler} disabled={loading}/>\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <ErrorMessage loading={loading} error={error} errorMessage={errorMessage}/>\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Divider />\n                </Grid>\n\n                <Grid item xs={12} className={classes.link}>\n                    <Grid container justify={'center'}>\n                        <Link to={'/register'}>\n                            Need an account?\n                        </Link>\n                    </Grid>\n                </Grid>\n\n            </Grid>\n        </LoginCommon>\n    )\n\n};\n\nexport default Login","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Box, Divider, Grid, TextField, Typography} from \"@material-ui/core\";\nimport FormButton from \"../commons/form-button\";\nimport {Link} from \"react-router-dom\";\nimport LoginCommon from \"./commons/login-common\";\n\nconst useStyles = makeStyles((theme) => ({\n    textField: {\n        width: '100%',\n        fontWeight: 700\n    },\n    link: {\n        fontWeight: 700,\n        '& a:link': {\n            color: theme.palette.primary.main\n        },\n        '& a:visited': {\n            color: theme.palette.primary.main\n        },\n        '& a:hover': {\n            color: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface RegisterProps {\n\n}\n\nconst Register: React.FC<RegisterProps> = () => {\n    const classes = useStyles();\n\n    return (\n        <LoginCommon imageUrl={'/images/register_bg.jpg'}>\n            <Grid container spacing={5}>\n                <Grid item xs={12}>\n                    <Typography variant={'h1'} component={'h1'} color={\"textPrimary\"}>\n                        <Box textAlign={'center'}>\n                            Join Us\n                        </Box>\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            label=\"Username\"\n                            value={''}\n                            // onChange={handleChange}\n                            variant=\"outlined\"\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            label=\"Email\"\n                            value={''}\n                            // onChange={handleChange}\n                            variant=\"outlined\"\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            label=\"Password\"\n                            value={''}\n                            // onChange={handleChange}\n                            variant=\"outlined\"\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            label=\"Confirm Password\"\n                            value={''}\n                            // onChange={handleChange}\n                            variant=\"outlined\"\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <FormButton text={'I\\'m in!'} onClick={() => false} disabled={false}/>\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Divider />\n                </Grid>\n                <Grid item xs={12} className={classes.link}>\n                    <Grid container justify={'center'}>\n                        <Link to={'/login'}>\n                            Already have an account?\n                        </Link>\n                    </Grid>\n                </Grid>\n\n            </Grid>\n        </LoginCommon>\n    )\n};\n\nexport default Register","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useRouteMatch,\n    useParams\n} from \"react-router-dom\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport {makeStyles, ThemeProvider} from '@material-ui/core/styles';\nimport theme from './theme';\nimport Header from \"./components/header/header\";\nimport PostList from \"./components/post-list/post-list\";\nimport Login from \"./components/login/login\";\nimport Register from \"./components/login/register\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: '100vw',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'flex-start'\n    },\n    widthWrapper: {\n        width: '1000px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        [theme.breakpoints.down('sm')]: {\n            width: '100%',\n        }\n    }\n}));\n\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div className={classes.root}>\n                <Router basename={process.env.PUBLIC_URL}>\n                <Header />\n                    <div className={classes.widthWrapper}>\n                        <Switch>\n                            <Route path=\"/\" exact render={ () => <PostList /> } />\n                            <Route path=\"/login\" render={ () => <Login /> } />\n                            <Route path=\"/register\" render={ () => <Register /> } />\n                        </Switch>\n                    </div>\n                </Router>\n            </div>\n        </ThemeProvider>\n    )\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}