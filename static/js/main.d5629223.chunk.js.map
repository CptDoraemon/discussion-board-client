{"version":3,"sources":["redux/actions/login-status.ts","redux/state.ts","redux/reducers/login-status.ts","redux/reducers/root-reducers.ts","redux/configure-store.ts","theme.tsx","components/post-list/post-list.tsx","utils/use-full-height.tsx","components/login/commons/login-common.tsx","components/commons/form-button.tsx","utils/use-input-field.tsx","utils/validators.ts","requests/urls.ts","requests/useLogin.tsx","components/login/commons/error-message.tsx","components/login/login.tsx","requests/useRegister.tsx","components/login/register.tsx","components/commons/theme-button.tsx","requests/useLogout.tsx","components/header/logged-in-user-panel.tsx","components/header/anonymous-user-panel.tsx","components/header/header.tsx","containers/header-container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoginStatusActionTypes","defaultState","loginStatus","isLogin","username","token","access","refresh","updateLoginStatus","newStatus","type","UPDATE_LOGIN_STATUS","state","action","LOGOUT","REFRESH_TOKEN","Object","assign","newAccessToken","rootReducers","combineReducers","loggerMiddleware","createLogger","theme","createMuiTheme","palette","primary","main","contrastText","secondary","text","typography","responsiveFontSizes","h1","fontFamily","join","fontWeight","fontSize","breakpoints","up","useStyles","makeStyles","PostList","useFullHeight","ref","useState","height","setHeight","useEffect","current","getBoundingClientRect","root","width","margin","spacing","display","flexDirection","alignItems","justifyContent","image","objectFit","down","content","padding","textField","link","color","LoginCommon","children","imageUrl","classes","containerRef","useRef","Paper","elevation","className","src","process","alt","style","title","button","backgroundColor","textTransform","borderBottom","borderRadius","opacity","FormButton","disabled","form","variant","disableElevation","useInputField","defaultValue","validator","value","setValue","error","setError","errorMessage","setErrorMessage","e","target","reference","validatorResult","isValid","message","usernameValidator","length","emailValidator","indexOf","passwordValidator","confirmPasswordValidator","execValidators","validators","validationResults","map","_","i","urls","login","accountBase","register","verifySession","useLogin","loading","setLoading","dispatch","useDispatch","history","useHistory","location","useLocation","email","password","fetch","method","headers","body","JSON","stringify","then","res","json","status","data","from","pathname","replace","catch","ErrorMessage","Typography","component","Box","CircularProgress","Login","setEmail","emailError","emailErrorMessage","validateEmail","setPassword","passwordError","passwordErrorMessage","validatePassword","onSubmit","preventDefault","id","Grid","container","item","xs","textAlign","justify","TextField","label","name","onChange","helperText","Divider","to","useRegister","confirmPassword","Register","setUsername","usernameError","usernameErrorMessage","validateUsername","setConfirmPassword","confirmPasswordError","confirmPasswordErrorMessage","validateConfirmPassword","md","letterSpacing","ThemeButton","url","onClick","Link","useLogout","clientSideLogout","LoggedInUserPanel","logout","size","AnonymousUserPanel","headerDimension","position","zIndex","appBar","left","top","placeholder","Header","HeaderContainer","connect","store","createStore","applyMiddleware","maxWidth","widthWrapper","App","ThemeProvider","CssBaseline","basename","path","exact","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.d5629223.chunk.js","sourcesContent":["import {State, defaultState} from \"../state\";\n\nexport enum LoginStatusActionTypes {\n    'UPDATE_LOGIN_STATUS'='UPDATE_LOGIN_STATUS',\n    'LOGOUT'='LOGOUT',\n    'REFRESH_TOKEN'='REFRESH_TOKEN'\n}\n\n// export type LoginStatusAction =\n//     {\n//         type: typeof LoginStatusActionTypes.LOGOUT,\n//         newStatus: State['loginStatus']\n//     } |\n//     {\n//         type: typeof LoginStatusActionTypes.UPDATE_LOGIN_STATUS,\n//         newStatus: State['loginStatus']\n//     } |\n//     {\n//         type: typeof LoginStatusActionTypes.REFRESH_TOKEN,\n//         newStatus: State['loginStatus']\n//     }\n\nexport type LoginStatusAction = ReturnType<typeof logout> | ReturnType<typeof updateLoginStatus> | ReturnType<typeof refreshToken>\n\nexport function logout() {\n    return {\n        type: LoginStatusActionTypes.LOGOUT as typeof LoginStatusActionTypes.LOGOUT,\n        newStatus: defaultState.loginStatus\n    }\n}\n\nexport function updateLoginStatus(newStatus: State['loginStatus']) {\n    return {\n        type: LoginStatusActionTypes.UPDATE_LOGIN_STATUS as typeof LoginStatusActionTypes.UPDATE_LOGIN_STATUS,\n        newStatus\n    }\n}\n\nexport function refreshToken(newAccessToken: State['loginStatus']['token']['access']) {\n    return {\n        type: LoginStatusActionTypes.REFRESH_TOKEN as typeof LoginStatusActionTypes.REFRESH_TOKEN,\n        newAccessToken\n    }\n}","export interface State {\n    loginStatus: {\n        isLogin: boolean,\n        username: string,\n        token: {\n            access: string,\n            refresh: string\n        }\n    }\n}\n\nexport const defaultState: State = {\n    loginStatus: {\n        isLogin: false,\n        username: '',\n        token: {\n            access: '',\n            refresh: ''\n        }\n    }\n};","import {defaultState, State} from \"../state\";\nimport {LoginStatusAction, LoginStatusActionTypes} from \"../actions/login-status\";\n\n\nfunction loginStatus(\n    state = defaultState.loginStatus,\n    action: LoginStatusAction\n): State['loginStatus'] {\n    switch (action.type) {\n        case LoginStatusActionTypes.UPDATE_LOGIN_STATUS:\n            return action.newStatus;\n        case LoginStatusActionTypes.LOGOUT:\n            return action.newStatus;\n        case LoginStatusActionTypes.REFRESH_TOKEN:\n            const newStatus = Object.assign({}, state);\n            newStatus.token.access = action.newAccessToken;\n            return newStatus;\n        default:\n            return state\n    }\n}\n\nexport default loginStatus;","import {combineReducers} from \"redux\";\nimport loginStatus from \"./login-status\";\n\nconst rootReducers = combineReducers({\n    loginStatus\n});\n\nexport default rootReducers;","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducers from \"./reducers/root-reducers\";\nimport {defaultState} from \"./state\";\n// import rootReducers from \"./reducers/root-reducers\";\n\nimport { createLogger } from 'redux-logger'\nconst loggerMiddleware = createLogger();\n\n\nexport default function configureStore() {\n    return createStore(\n        rootReducers,\n        defaultState,\n        // applyMiddleware(thunkMiddleware)\n        // applyMiddleware(thunkMiddleware, loggerMiddleware)\n        applyMiddleware(loggerMiddleware)\n    )\n}","import {createMuiTheme, responsiveFontSizes} from \"@material-ui/core/styles\";\n\nlet theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#805ad5',\n            contrastText: '#fff',\n        },\n        secondary: {\n            main: '#f6ad55',\n            contrastText: '#fff',\n        },\n        text: {\n            primary: '#4a5568'\n        }\n    },\n    typography: {\n        \"fontFamily\": \"system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji\",\n        \"fontSize\": 14,\n        \"fontWeightLight\": 300,\n        \"fontWeightRegular\": 400,\n        \"fontWeightMedium\": 500\n    }\n});\ntheme = responsiveFontSizes(theme);\ntheme.typography.h1 = {\n    fontFamily: [\n        'Open-sans',\n        'sans-serif',\n    ].join(','),\n    fontWeight: 800,\n    fontSize: '1.25rem',\n    [theme.breakpoints.up('md')]: {\n        fontSize: '1.5rem',\n    },\n    fontStyle: \"normal\",\n    color: \"inherit\"\n};\n\nexport default theme;","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n\n}));\n\ninterface PostListProps {\n\n}\n\nconst PostList: React.FC<PostListProps> = () => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            post list\n        </div>\n    )\n};\n\nexport default PostList","import React, {useEffect, useState} from \"react\";\n\nconst useFullHeight = (ref: React.RefObject<HTMLDivElement>) => {\n    const [height, setHeight] = useState(0);\n\n    useEffect(() => {\n        if (!ref.current) return;\n        setHeight(ref.current.getBoundingClientRect().height)\n    }, [ref]);\n\n    return height\n};\n\nexport default useFullHeight","import React, {useRef} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Paper} from \"@material-ui/core\";\nimport useFullHeight from \"../../../utils/use-full-height\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        margin: theme.spacing(10, 0),\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    image: {\n        width: '40%',\n        height: '100%',\n        '& img': {\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover'\n        },\n        [theme.breakpoints.down('sm')]: {\n            display:'none'\n        }\n    },\n    content: {\n        width: '60%',\n        padding: theme.spacing(10, 5),\n        [theme.breakpoints.down('sm')]: {\n            width: '100%'\n        }\n    },\n    textField: {\n        width: '100%',\n        fontWeight: 700\n    },\n    link: {\n        fontWeight: 700,\n        '& a:link': {\n            color: theme.palette.primary.main\n        },\n        '& a:visited': {\n            color: theme.palette.primary.main\n        },\n        '& a:hover': {\n            color: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface LoginCommonProps {\n    imageUrl: string\n}\n\nconst LoginCommon: React.FC<LoginCommonProps> = ({children, imageUrl}) => {\n    const classes = useStyles();\n\n    const containerRef = useRef<HTMLDivElement>(null);\n    const height = useFullHeight(containerRef);\n\n    return (\n        <Paper elevation={0} className={classes.root} ref={containerRef}>\n            <div className={classes.image}>\n                <img\n                    src={process.env.PUBLIC_URL + imageUrl}\n                    alt={'login background'}\n                    style={{height: `${height}px`}}\n                    title={'login background'}\n                />\n            </div>\n            <div className={classes.content}>\n                { children }\n            </div>\n        </Paper>\n    )\n};\n\nexport default LoginCommon","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Button as MuiButton} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        width: '100%',\n        backgroundColor: theme.palette.primary.main,\n        color: '#fff',\n        fontWeight: 700,\n        textTransform: 'none',\n        borderBottom: '2px solid rgba(0,0,0,0.1)',\n        borderRadius: '5px',\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main\n        },\n        '&:disabled': {\n            backgroundColor: theme.palette.secondary.main,\n            opacity: 0.7\n        }\n    }\n}));\n\ninterface ButtonProps {\n    text: string,\n    disabled: boolean,\n    form: string\n}\n\nconst FormButton: React.FC<ButtonProps> = ({text, disabled, form}) => {\n    const classes = useStyles();\n\n    return (\n        <MuiButton variant=\"contained\" classes={{root: classes.button}} disableElevation type={'submit'} form={form} disabled={disabled}>\n            { text }\n        </MuiButton>\n    )\n};\n\nexport default FormButton\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport {Validator} from \"./validators\";\n\ntype ChangeHandler = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void\n\nconst useInputField = (\n    defaultValue: string,\n    validator: Validator\n) => {\n    const [value, setValue] = useState(defaultValue);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const validate = (reference?: string) => {\n        const validatorResult = reference ? validator(value, reference) : validator(value);\n        setError(!validatorResult.isValid);\n        setErrorMessage(validatorResult.message);\n\n        return validatorResult.isValid as boolean\n    };\n\n    const changeHandler: ChangeHandler = (e) => {\n        if (error) setError(false);\n        setValue(e.target.value)\n    };\n\n    return [value, changeHandler, error, errorMessage, validate] as [string, ChangeHandler, boolean, string, typeof validate]\n};\n\nexport default useInputField","export type Validator = (value: string, reference?: string) => {isValid: boolean, message: string}\n\nconst usernameValidator: Validator = (value) => {\n    let isValid = false;\n    let message = 'Invalid username';\n\n    if (value.length >= 30) {\n        message = 'Username length must be less than 30 characters';\n    } else if (value.length === 0) {\n        message = 'Username cannot be empty';\n    } else {\n        isValid = true;\n        message = '';\n    }\n\n    return {\n        isValid,\n        message\n    }\n};\n\nconst emailValidator: Validator = (value) => {\n    let isValid = false;\n    let message = 'Invalid Email format';\n\n    if (value.indexOf('@') === -1) {\n\n    } else if (value.indexOf('.') === -1) {\n\n    } else if (value.length === 0) {\n        message = 'Email cannot be empty';\n    } else if (value.length >= 60) {\n        message = 'Email too long';\n    }else {\n        isValid = true;\n        message = '';\n    }\n\n    return {\n        isValid,\n        message\n    }\n};\n\nconst passwordValidator: Validator = (value) => {\n    let isValid = false;\n    let message = '';\n\n    if (value.length === 0) {\n        message = 'Email cannot be empty';\n    } else {\n        isValid = true;\n        message = '';\n    }\n\n    return {\n        isValid,\n        message\n    }\n};\n\nconst confirmPasswordValidator: Validator = (value, reference) => {\n    let isValid = false;\n    let message = 'Not same as the password';\n\n    if (value === reference) {\n        message = '';\n        isValid = true;\n    }\n    return {\n        isValid,\n        message\n    }\n};\n\nconst execValidators = (validators: (()=>boolean)[]) => {\n    const validationResults = validators.map(_ => _());\n    for (let i=0; i<validationResults.length; i++) {\n        if (!validationResults[i]) {\n            return false\n        }\n    }\n\n    return true\n};\n\nexport {\n    usernameValidator,\n    emailValidator,\n    passwordValidator,\n    confirmPasswordValidator,\n    execValidators\n}","const base = 'https://django-api-xiaoxihome.herokuapp.com/';\n\nconst accountBase = base + 'api/discussion_board/account/';\nconst login = accountBase + 'login/';\nconst register = accountBase + 'register/';\nconst verifySession = accountBase + 'verify_session/';\n\nconst urls = {\n    login,\n    register,\n    verifySession\n};\n\nexport default urls","import {useState} from \"react\";\nimport urls from \"./urls\";\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport { useDispatch } from 'react-redux'\nimport { updateLoginStatus } from \"../redux/actions/login-status\";\n\nconst useLogin = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    const dispatch = useDispatch();\n    let history = useHistory();\n    let location = useLocation();\n\n    const login = (\n        email: string,\n        password: string\n    ) => {\n        // reset states\n        setError(false);\n        setErrorMessage('');\n\n        // start fetching\n        setLoading(true);\n        fetch(urls.login, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email,\n                password\n            })\n        })\n            .then((res) => res.json())\n            .then(json => {\n                setLoading(false);\n\n                if (json.status === 'success') {\n                    dispatch(updateLoginStatus({\n                        isLogin: true,\n                        username: json.data.username,\n                        token: {\n                            access: json.data.access,\n                            refresh: json.data.refresh\n                        }\n                    }));\n                    let { from }: any = location.state || { from: { pathname: \"/\" } };\n                    history.replace(from);\n                } else {\n                    setError(true);\n                    if (json.status === 'error') {\n                        setErrorMessage(json.message)\n                    } else {\n                        setErrorMessage('Server unavailable, please try again later.')\n                    }\n                }\n            })\n            .catch(e => {\n                setLoading(false);\n\n                setError(true);\n                setErrorMessage('Server unavailable, please try again later.')\n            });\n    };\n\n    return [loading, error, errorMessage, login] as [boolean, boolean, string, typeof login]\n\n};\n\nexport default useLogin","import {Box, CircularProgress, Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    errorMessage: {\n        fontWeight: 700,\n        color: theme.palette.error.main\n    }\n}));\n\ninterface ErrorMessageProps {\n    loading: boolean,\n    error: boolean,\n    errorMessage: string\n\n}\n\nconst ErrorMessage:React.FC<ErrorMessageProps> = ({loading, errorMessage, error}) => {\n    const classes = useStyles();\n\n    return (\n        <Typography variant={'body1'} component={'div'}>\n            <Box className={classes.errorMessage} height={40}>\n                {   loading ?\n                        <CircularProgress color=\"primary\" /> :\n                        error && errorMessage ?\n                            errorMessage :\n                            ' '\n                }\n            </Box>\n        </Typography>\n    )\n};\n\nexport default ErrorMessage","import React, {FormEvent} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport LoginCommon from \"./commons/login-common\";\nimport {Box, CircularProgress, Divider, Grid, TextField, Typography} from \"@material-ui/core\";\nimport FormButton from \"../commons/form-button\";\nimport {Link} from \"react-router-dom\";\nimport useInputField from \"../../utils/use-input-field\";\nimport {emailValidator, execValidators, passwordValidator} from \"../../utils/validators\";\nimport useLogin from \"../../requests/useLogin\";\nimport ErrorMessage from \"./commons/error-message\";\n\nconst useStyles = makeStyles((theme) => ({\n    textField: {\n        width: '100%',\n        fontWeight: 700\n    },\n    link: {\n        fontWeight: 700,\n        '& a:link': {\n            color: theme.palette.primary.main\n        },\n        '& a:visited': {\n            color: theme.palette.primary.main\n        },\n        '& a:hover': {\n            color: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface LoginProps {\n\n}\n\nconst Login: React.FC<LoginProps> = () => {\n    const classes = useStyles();\n    const [email, setEmail, emailError, emailErrorMessage, validateEmail] = useInputField('', emailValidator);\n    const [password, setPassword, passwordError, passwordErrorMessage, validatePassword] = useInputField('', passwordValidator);\n\n    const [loading, error, errorMessage, login] = useLogin();\n\n    const submitHandler = (e: FormEvent) => {\n        e.preventDefault();\n\n        if (execValidators([validateEmail, validatePassword])) {\n            login(email, password)\n        }\n    };\n\n    return (\n        <LoginCommon imageUrl={'/images/login_bg.jpg'}>\n            <form onSubmit={submitHandler} id={'login-form'}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <Typography variant={'h1'} component={'h1'} color={\"textPrimary\"}>\n                            <Box textAlign={'center'}>\n                                Log In\n                            </Box>\n                        </Typography>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Grid container justify={'center'}>\n                            <TextField\n                                error={emailError}\n                                label=\"Email\"\n                                name=\"email\"\n                                value={email}\n                                onChange={setEmail}\n                                variant=\"outlined\"\n                                helperText={emailError ? emailErrorMessage: ' '}\n                                className={classes.textField}\n                            />\n                        </Grid>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Grid container justify={'center'}>\n                            <TextField\n                                error={passwordError}\n                                type=\"password\"\n                                label=\"Password\"\n                                name=\"password\"\n                                value={password}\n                                onChange={setPassword}\n                                variant=\"outlined\"\n                                helperText={passwordError ? passwordErrorMessage : ' '}\n                                className={classes.textField}\n                            />\n                        </Grid>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Grid container justify={'center'}>\n                            <FormButton text={'Log me in!'} form={'login-form'} disabled={loading}/>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Grid container justify={'center'}>\n                            <ErrorMessage loading={loading} error={error} errorMessage={errorMessage}/>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Divider />\n                    </Grid>\n\n                    <Grid item xs={12} className={classes.link}>\n                        <Grid container justify={'center'}>\n                            <Link to={'/register'}>\n                                Need an account?\n                            </Link>\n                        </Grid>\n                    </Grid>\n\n                </Grid>\n            </form>\n        </LoginCommon>\n    )\n\n};\n\nexport default Login","import {useState} from \"react\";\nimport urls from \"./urls\";\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport { useDispatch } from 'react-redux'\nimport { updateLoginStatus } from \"../redux/actions/login-status\";\n\nconst useRegister = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    const dispatch = useDispatch();\n    let history = useHistory();\n    let location = useLocation();\n\n    const register = (\n        username: string,\n        email: string,\n        password: string,\n        confirmPassword: string\n    ) => {\n        // reset states\n        setError(false);\n        setErrorMessage('');\n\n        // start fetching\n        setLoading(true);\n        fetch(urls.register, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username,\n                email,\n                password,\n                'confirm_password': confirmPassword\n            })\n        })\n            .then((res) => res.json())\n            .then(json => {\n                setLoading(false);\n\n                if (json.status === 'success') {\n                    dispatch(updateLoginStatus({\n                        isLogin: true,\n                        username: json.data.username,\n                        token: {\n                            access: json.data.access,\n                            refresh: json.data.refresh\n                        }\n                    }));\n                    let { from }: any = location.state || { from: { pathname: \"/\" } };\n                    history.replace(from);\n                } else {\n                    setError(true);\n                    if (json.status === 'error') {\n                        setErrorMessage(json.message)\n                    } else {\n                        setErrorMessage('Server unavailable, please try again later.')\n                    }\n                }\n            })\n            .catch(e => {\n                setLoading(false);\n\n                setError(true);\n                setErrorMessage('Server unavailable, please try again later.')\n            });\n    };\n\n    return [loading, error, errorMessage, register] as [boolean, boolean, string, typeof register]\n\n};\n\nexport default useRegister","import React, {FormEvent} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Box, Divider, Grid, TextField, Typography} from \"@material-ui/core\";\nimport FormButton from \"../commons/form-button\";\nimport {Link} from \"react-router-dom\";\nimport LoginCommon from \"./commons/login-common\";\nimport useInputField from \"../../utils/use-input-field\";\nimport {\n    confirmPasswordValidator,\n    emailValidator,\n    execValidators,\n    passwordValidator,\n    usernameValidator\n} from \"../../utils/validators\";\nimport ErrorMessage from \"./commons/error-message\";\nimport useRegister from \"../../requests/useRegister\";\n\nconst useStyles = makeStyles((theme) => ({\n    textField: {\n        width: '100%',\n        fontWeight: 700\n    },\n    link: {\n        fontWeight: 700,\n        '& a:link': {\n            color: theme.palette.primary.main\n        },\n        '& a:visited': {\n            color: theme.palette.primary.main\n        },\n        '& a:hover': {\n            color: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface RegisterProps {\n\n}\n\nconst Register: React.FC<RegisterProps> = () => {\n    const classes = useStyles();\n\n    const [username, setUsername, usernameError, usernameErrorMessage, validateUsername] = useInputField('', usernameValidator);\n    const [email, setEmail, emailError, emailErrorMessage, validateEmail] = useInputField('', emailValidator);\n    const [password, setPassword, passwordError, passwordErrorMessage, validatePassword] = useInputField('', passwordValidator);\n    const [confirmPassword, setConfirmPassword, confirmPasswordError, confirmPasswordErrorMessage, validateConfirmPassword] = useInputField('', confirmPasswordValidator);\n\n    const [loading, error, errorMessage, register] = useRegister();\n\n    const submitHandler = (e: FormEvent) => {\n        e.preventDefault();\n        if (\n            execValidators([validateUsername, validateEmail, validatePassword]) &&\n            validateConfirmPassword(password)\n        ) {\n            register(username, email, password, confirmPassword)\n        }\n    };\n\n    const formID = 'register-form';\n\n    return (\n        <LoginCommon imageUrl={'/images/register_bg.jpg'}>\n            <form onSubmit={submitHandler} id={formID}>\n                <Grid container spacing={5}>\n                    <Grid item xs={12}>\n                        <Typography variant={'h1'} component={'h1'} color={\"textPrimary\"}>\n                            <Box textAlign={'center'}>\n                                Join Us\n                            </Box>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container justify={'center'}>\n                            <TextField\n                                error={usernameError}\n                                label=\"Username\"\n                                name=\"username\"\n                                value={username}\n                                onChange={setUsername}\n                                helperText={usernameError ? usernameErrorMessage: ' '}\n                                variant=\"outlined\"\n                                className={classes.textField}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container justify={'center'}>\n                            <TextField\n                                error={emailError}\n                                label=\"Email\"\n                                name=\"email\"\n                                value={email}\n                                onChange={setEmail}\n                                helperText={emailError ? emailErrorMessage: ' '}\n                                variant=\"outlined\"\n                                className={classes.textField}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <Grid container justify={'center'}>\n                            <TextField\n                                error={passwordError}\n                                label=\"Password\"\n                                name=\"password\"\n                                type=\"password\"\n                                value={password}\n                                onChange={setPassword}\n                                helperText={passwordError ? passwordErrorMessage: ' '}\n                                variant=\"outlined\"\n                                className={classes.textField}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <Grid container justify={'center'}>\n                            <TextField\n                                error={confirmPasswordError}\n                                label=\"Confirm Password\"\n                                name=\"confirm-password\"\n                                type=\"password\"\n                                value={confirmPassword}\n                                onChange={setConfirmPassword}\n                                helperText={confirmPasswordError ? confirmPasswordErrorMessage: ' '}\n                                variant=\"outlined\"\n                                className={classes.textField}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container justify={'center'}>\n                            <FormButton text={'I\\'m in!'} form={formID} disabled={false}/>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Grid container justify={'center'}>\n                            <ErrorMessage loading={loading} error={error} errorMessage={errorMessage}/>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Divider />\n                    </Grid>\n                    <Grid item xs={12} className={classes.link}>\n                        <Grid container justify={'center'}>\n                            <Link to={'/login'}>\n                                Already have an account?\n                            </Link>\n                        </Grid>\n                    </Grid>\n\n                </Grid>\n            </form>\n        </LoginCommon>\n    )\n};\n\nexport default Register","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Button as MuiButton} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        backgroundColor: 'rgba(255,255,255,0.3)',\n        color: '#fff',\n        fontWeight: 700,\n        textTransform: 'capitalize',\n        letterSpacing: 'inherit',\n        borderBottom: '2px solid rgba(0,0,0,0.1)',\n        borderRadius: '5px',\n        // margin: '0 4px',\n        padding: '4px 10px',\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface ButtonProps {\n    text: string,\n    url?: string,\n    onClick?: () => void\n}\n\nconst ThemeButton: React.FC<ButtonProps> = ({text, url, onClick}) => {\n    const classes = useStyles();\n\n    if (url) {\n        return (\n            <MuiButton variant=\"contained\" classes={{root: classes.button}} disableElevation component={Link} to={url}>\n                { text }\n            </MuiButton>\n        )\n    } else {\n        return (\n            <MuiButton variant=\"contained\" classes={{root: classes.button}} disableElevation onClick={onClick}>\n                { text }\n            </MuiButton>\n        )\n    }\n};\n\nexport default ThemeButton\n","import {useState} from \"react\";\nimport urls from \"./urls\";\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport { useDispatch } from 'react-redux'\nimport {logout as logoutAction} from \"../redux/actions/login-status\";\n\nconst useLogout = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    const dispatch = useDispatch();\n    let history = useHistory();\n    let location = useLocation();\n\n    const clientSideLogout = () => {\n        dispatch(logoutAction());\n        let { from }: any = location.state || { from: { pathname: \"/\" } };\n        history.replace(from);\n    };\n\n    const logout = () => {\n        clientSideLogout()\n    };\n\n    return [loading, error, errorMessage, logout] as [boolean, boolean, string, typeof logout]\n\n};\n\nexport default useLogout","import ThemeButton from \"../commons/theme-button\";\nimport React from \"react\";\nimport {Box, CircularProgress, Grid, Typography} from \"@material-ui/core\";\nimport useLogout from \"../../requests/useLogout\";\n\ninterface LoggedInUserPanelProps {\n    username: string\n}\n\nconst LoggedInUserPanel: React.FC<LoggedInUserPanelProps> = ({username}) => {\n    const [loading, error, errorMessage, logout] = useLogout();\n\n    return (\n        <Grid container alignItems={\"center\"} justify={\"center\"} spacing={1}>\n            <Grid item>\n                <Typography component={'div'}>\n                    <Box>\n                        { username }\n                    </Box>\n                </Typography>\n            </Grid>\n            <Grid item>\n                {\n                    loading ?\n                        <CircularProgress color=\"secondary\" size={'1rem'}/> :\n                        <ThemeButton text={'Logout'} onClick={logout}/>\n                }\n            </Grid>\n        </Grid>\n    )\n};\n\nexport default LoggedInUserPanel","import ThemeButton from \"../commons/theme-button\";\nimport React from \"react\";\nimport {Grid} from \"@material-ui/core\";\n\nconst AnonymousUserPanel: React.FC = () => {\n    return (\n        <Grid container alignItems={\"center\"} justify={\"center\"} spacing={1}>\n            <Grid item>\n                <ThemeButton text={'Join'} url={'/register'}/>\n            </Grid>\n            <Grid item>\n                <ThemeButton text={'Login'} url={'/login'}/>\n            </Grid>\n        </Grid>\n    )\n};\n\nexport default AnonymousUserPanel","import React, {useContext} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Box, Grid, Typography} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\nimport LoggedInUserPanel from \"./logged-in-user-panel\";\nimport AnonymousUserPanel from \"./anonymous-user-panel\";\n\ninterface HeaderProps {\n    isLogin: boolean,\n    username: string,\n}\n\nconst useStyles = makeStyles((theme) => ({\n    headerDimension: {\n        width: '100%',\n        height: '80px',\n    },\n    root: {\n        backgroundColor: theme.palette.primary.main,\n        position: 'fixed',\n        zIndex: theme.zIndex.appBar,\n        left: 0,\n        top: 0,\n        color: theme.palette.primary.contrastText\n    },\n    placeholder: {\n        position: 'relative',\n    },\n    button: {\n        backgroundColor: 'rgba(255,255,255,0.5)',\n        color: '#fff',\n        fontWeight: 700,\n        textTransform: 'capitalize',\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main\n        }\n    }\n}));\n\n\nconst Header: React.FC<HeaderProps> = ({isLogin, username}) => {\n    const classes = useStyles();\n\n    return (\n        <div className={`${classes.placeholder} ${classes.headerDimension}`}>\n            <Grid container alignItems={\"center\"} justify={\"center\"} className={`${classes.root} ${classes.headerDimension}`}>\n                <Grid item xs={6} md={4}>\n                    <Link to={'/'}>\n                        <Typography variant={'h1'} component={'h1'}>\n                            <Box fontWeight={700} textAlign={\"center\"}>\n                                Blog | XiaoxiHome\n                            </Box>\n                        </Typography>\n                    </Link>\n                </Grid>\n                <Grid item xs={1} md={4}>\n\n                </Grid>\n                <Grid item xs={5} md={4}>\n                    {\n                        isLogin ?\n                            <LoggedInUserPanel username={username}/> :\n                            <AnonymousUserPanel />\n                    }\n                </Grid>\n            </Grid>\n        </div>\n    )\n};\n\n\n\nexport default Header;\n","import {connect} from \"react-redux\";\nimport Header from \"../components/header/header\";\nimport {State} from \"../redux/state\";\n\nfunction mapStateToProps(state: State) {\n    return {\n        isLogin: state.loginStatus.isLogin,\n        username: state.loginStatus.username\n    }\n}\n\nconst HeaderContainer = connect(\n    mapStateToProps\n)(Header);\n\nexport default HeaderContainer;\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport configureStore from \"./redux/configure-store\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport {makeStyles, ThemeProvider} from '@material-ui/core/styles';\nimport theme from './theme';\nimport Header from \"./components/header/header\";\nimport PostList from \"./components/post-list/post-list\";\nimport Login from \"./components/login/login\";\nimport Register from \"./components/login/register\";\nimport HeaderContainer from \"./containers/header-container\";\n\nconst store = configureStore();\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: '100vw',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'flex-start'\n    },\n    widthWrapper: {\n        width: '1000px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        [theme.breakpoints.down('sm')]: {\n            width: '100%',\n        }\n    }\n}));\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <Provider store={store}>\n        <ThemeProvider theme={theme}>\n        <CssBaseline />\n            <div className={classes.root}>\n                <Router basename={process.env.PUBLIC_URL}>\n                <HeaderContainer />\n                    <div className={classes.widthWrapper}>\n                        <Switch>\n                            <Route path=\"/\" exact render={ () => <PostList /> } />\n                            <Route path=\"/login\" render={ () => <Login /> } />\n                            <Route path=\"/register\" render={ () => <Register /> } />\n                        </Switch>\n                    </div>\n                </Router>\n            </div>\n        </ThemeProvider>\n        </Provider>\n    )\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}