{"version":3,"sources":["redux/actions/login-status.ts","redux/state.ts","redux/reducers/login-status.ts","redux/reducers/root-reducers.ts","theme.tsx","components/post-list/post-list.tsx","utils/use-full-height.tsx","components/login/commons/login-common.tsx","components/commons/form-button.tsx","utils/use-input-field.tsx","utils/validators.ts","requests/urls.ts","requests/useLogin.tsx","components/login/commons/error-message.tsx","components/login/login.tsx","components/login/register.tsx","components/commons/theme-button.tsx","components/header/logged-in-user-panel.tsx","components/header/anonymous-user-panel.tsx","components/header/header.tsx","containers/header-container.tsx","App.tsx","redux/configure-store.ts","serviceWorker.ts","index.tsx"],"names":["LoginStatusActionTypes","defaultState","loginStatus","isLogin","username","state","action","type","UPDATE_LOGIN_STATUS","LOGOUT","newStatus","rootReducers","combineReducers","theme","createMuiTheme","palette","primary","main","contrastText","secondary","text","typography","responsiveFontSizes","h1","fontFamily","join","fontWeight","fontSize","breakpoints","up","useStyles","makeStyles","PostList","useFullHeight","ref","useState","height","setHeight","useEffect","current","getBoundingClientRect","root","width","margin","spacing","display","flexDirection","alignItems","justifyContent","image","objectFit","down","content","padding","textField","link","color","LoginCommon","children","imageUrl","classes","containerRef","useRef","Paper","elevation","className","src","process","alt","style","title","button","backgroundColor","textTransform","borderBottom","borderRadius","opacity","FormButton","onClick","disabled","variant","disableElevation","useInputField","defaultValue","validator","value","setValue","error","setError","errorMessage","setErrorMessage","e","target","validatorResult","isValid","message","emailValidator","indexOf","length","passwordValidator","urls","login","accountBase","useLogin","loading","setLoading","dispatch","useDispatch","history","useHistory","location","useLocation","email","password","validators","validationResults","map","_","i","fetch","method","headers","body","JSON","stringify","then","res","json","status","console","log","data","from","pathname","replace","catch","ErrorMessage","Typography","component","Box","CircularProgress","Login","setEmail","emailError","emailErrorMessage","validateEmail","setPassword","passwordError","passwordErrorMessage","validatePassword","Grid","container","item","xs","textAlign","justify","TextField","label","name","onChange","helperText","Divider","to","Register","md","letterSpacing","ThemeButton","url","Link","LoggedInUserPanel","logout","AnonymousUserPanel","headerDimension","position","left","top","placeholder","Header","HeaderContainer","connect","store","createStore","maxWidth","widthWrapper","App","ThemeProvider","CssBaseline","basename","path","exact","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18ec0e0d.chunk.js","sourcesContent":["import {State, defaultState} from \"../state\";\n\nexport enum LoginStatusActionTypes {\n    'UPDATE_LOGIN_STATUS'='UPDATE_LOGIN_STATUS',\n    'LOGOUT'='LOGOUT'\n}\n\nexport interface LoginStatusAction {\n    type: LoginStatusActionTypes,\n    newStatus: State['loginStatus']\n}\n\nexport function logout() {\n    return {\n        type: LoginStatusActionTypes.LOGOUT,\n        newStatus: defaultState\n    }\n}\n\nexport function updateLoginStatus(newStatus: State['loginStatus']) {\n    return {\n        type: LoginStatusActionTypes.UPDATE_LOGIN_STATUS,\n        newStatus\n    }\n}","export interface State {\n    loginStatus: {\n        isLogin: boolean,\n        username: string\n    }\n}\n\nexport const defaultState: State = {\n    loginStatus: {\n        isLogin: false,\n        username: ''\n    }\n};","import {defaultState, State} from \"../state\";\nimport {LoginStatusAction, LoginStatusActionTypes} from \"../actions/login-status\";\n\n\nfunction loginStatus(\n    state = defaultState.loginStatus,\n    action: LoginStatusAction\n) {\n    switch (action.type) {\n        case LoginStatusActionTypes.UPDATE_LOGIN_STATUS:\n            return action.newStatus;\n        case LoginStatusActionTypes.LOGOUT:\n            return action.newStatus;\n        default:\n            return state\n    }\n}\n\nexport default loginStatus;","import {combineReducers} from \"redux\";\nimport loginStatus from \"./login-status\";\n\nconst rootReducers = combineReducers({\n    loginStatus\n});\n\nexport default rootReducers;","import {createMuiTheme, responsiveFontSizes} from \"@material-ui/core/styles\";\n\nlet theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#805ad5',\n            contrastText: '#fff',\n        },\n        secondary: {\n            main: '#f6ad55',\n            contrastText: '#fff',\n        },\n        text: {\n            primary: '#4a5568'\n        }\n    },\n    typography: {\n        \"fontFamily\": \"system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji\",\n        \"fontSize\": 14,\n        \"fontWeightLight\": 300,\n        \"fontWeightRegular\": 400,\n        \"fontWeightMedium\": 500\n    }\n});\ntheme = responsiveFontSizes(theme);\ntheme.typography.h1 = {\n    fontFamily: [\n        'Open-sans',\n        'sans-serif',\n    ].join(','),\n    fontWeight: 800,\n    fontSize: '1.25rem',\n    [theme.breakpoints.up('md')]: {\n        fontSize: '1.5rem',\n    },\n    fontStyle: \"normal\",\n    color: \"inherit\"\n};\n\nexport default theme;","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n\n}));\n\ninterface PostListProps {\n\n}\n\nconst PostList: React.FC<PostListProps> = () => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            post list\n        </div>\n    )\n};\n\nexport default PostList","import React, {useEffect, useState} from \"react\";\n\nconst useFullHeight = (ref: React.RefObject<HTMLDivElement>) => {\n    const [height, setHeight] = useState(0);\n\n    useEffect(() => {\n        if (!ref.current) return;\n        setHeight(ref.current.getBoundingClientRect().height)\n    }, [ref]);\n\n    return height\n};\n\nexport default useFullHeight","import React, {useRef} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Paper} from \"@material-ui/core\";\nimport useFullHeight from \"../../../utils/use-full-height\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        margin: theme.spacing(10, 0),\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    image: {\n        width: '40%',\n        height: '100%',\n        '& img': {\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover'\n        },\n        [theme.breakpoints.down('sm')]: {\n            display:'none'\n        }\n    },\n    content: {\n        width: '60%',\n        padding: theme.spacing(10, 5),\n        [theme.breakpoints.down('sm')]: {\n            width: '100%'\n        }\n    },\n    textField: {\n        width: '100%',\n        fontWeight: 700\n    },\n    link: {\n        fontWeight: 700,\n        '& a:link': {\n            color: theme.palette.primary.main\n        },\n        '& a:visited': {\n            color: theme.palette.primary.main\n        },\n        '& a:hover': {\n            color: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface LoginCommonProps {\n    imageUrl: string\n}\n\nconst LoginCommon: React.FC<LoginCommonProps> = ({children, imageUrl}) => {\n    const classes = useStyles();\n\n    const containerRef = useRef<HTMLDivElement>(null);\n    const height = useFullHeight(containerRef);\n\n    return (\n        <Paper elevation={0} className={classes.root} ref={containerRef}>\n            <div className={classes.image}>\n                <img\n                    src={process.env.PUBLIC_URL + imageUrl}\n                    alt={'login background'}\n                    style={{height: `${height}px`}}\n                    title={'login background'}\n                />\n            </div>\n            <div className={classes.content}>\n                { children }\n            </div>\n        </Paper>\n    )\n};\n\nexport default LoginCommon","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Button as MuiButton} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        width: '100%',\n        backgroundColor: theme.palette.primary.main,\n        color: '#fff',\n        fontWeight: 700,\n        textTransform: 'none',\n        borderBottom: '2px solid rgba(0,0,0,0.1)',\n        borderRadius: '5px',\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main\n        },\n        '&:disabled': {\n            backgroundColor: theme.palette.secondary.main,\n            opacity: 0.7\n        }\n    }\n}));\n\ninterface ButtonProps {\n    text: string,\n    onClick: () => void,\n    disabled: boolean\n}\n\nconst FormButton: React.FC<ButtonProps> = ({text, onClick, disabled}) => {\n    const classes = useStyles();\n\n    return (\n        <MuiButton variant=\"contained\" classes={{root: classes.button}} disableElevation onClick={onClick} disabled={disabled}>\n            { text }\n        </MuiButton>\n    )\n};\n\nexport default FormButton\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\n\ntype ChangeHandler = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void\n\nconst useInputField = (\n    defaultValue: string,\n    validator: (value: string) => {isValid: boolean, message: string}\n) => {\n    const [value, setValue] = useState(defaultValue);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const validate = () => {\n        const validatorResult = validator(value);\n        setError(!validatorResult.isValid);\n        setErrorMessage(validatorResult.message);\n\n        return validatorResult.isValid\n    };\n\n    const changeHandler: ChangeHandler = (e) => {\n        if (error) setError(false);\n        setValue(e.target.value)\n    };\n\n    return [value, changeHandler, error, errorMessage, validate] as [string, ChangeHandler, boolean, string, () => boolean]\n};\n\nexport default useInputField","type Validator = (value: string) => {isValid: boolean, message: string}\n\nconst emailValidator: Validator = (value) => {\n    let isValid = false;\n    let message = 'Invalid Email format';\n\n    if (value.indexOf('@') === -1) {\n\n    } else if (value.indexOf('.') === -1) {\n\n    } else if (value.length === 0) {\n        message = 'Email cannot be empty';\n    } else {\n        isValid = true;\n        message = '';\n    }\n\n    return {\n        isValid,\n        message\n    }\n};\n\nconst passwordValidator: Validator = (value) => {\n    let isValid = false;\n    let message = '';\n\n    if (value.length === 0) {\n        message = 'Email cannot be empty';\n    } else {\n        isValid = true;\n        message = '';\n    }\n\n    return {\n        isValid,\n        message\n    }\n};\n\nexport {\n    emailValidator,\n    passwordValidator\n}","const base = 'https://django-api-xiaoxihome.herokuapp.com/';\n\nconst accountBase = base + 'api/discussion_board/account/';\nconst login = accountBase + 'login/';\n\nconst urls = {\n    login\n};\n\nexport default urls","import {useState} from \"react\";\nimport urls from \"./urls\";\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport { useDispatch } from 'react-redux'\nimport { updateLoginStatus } from \"../redux/actions/login-status\";\n\nconst useLogin = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    const dispatch = useDispatch();\n    let history = useHistory();\n    let location = useLocation();\n\n    const login = (\n        email: string,\n        password: string,\n        validators: (() => boolean)[]\n    ) => {\n        // reset states\n        setError(false);\n        setErrorMessage('');\n\n        // validate inputs\n        const validationResults = validators.map(_ => _());\n        for (let i=0; i<validationResults.length; i++) {\n            if (!validationResults[i]) {\n                return\n            }\n        }\n\n        // start fetching\n        setLoading(true);\n        fetch(urls.login, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email,\n                password\n            })\n        })\n            .then((res) => res.json())\n            .then(json => {\n                setLoading(false);\n                if (json.status === 'error') {\n                    setError(true);\n                    setErrorMessage(json.message)\n                } else {\n                    console.log(json);\n\n                    dispatch(updateLoginStatus({\n                        isLogin: true,\n                        username: json.data.username\n                    }));\n                    let { from }: any = location.state || { from: { pathname: \"/\" } };\n                    history.replace(from);\n                }\n            })\n            .catch(e => {\n                setLoading(false);\n\n                setError(true);\n                setErrorMessage('Server unavailable, please try again later.')\n            });\n    };\n\n    return [loading, error, errorMessage, login] as [boolean, boolean, string, typeof login]\n\n};\n\nexport default useLogin","import {Box, CircularProgress, Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    errorMessage: {\n        fontWeight: 700,\n        color: theme.palette.error.main\n    }\n}));\n\ninterface ErrorMessageProps {\n    loading: boolean,\n    error: boolean,\n    errorMessage: string\n\n}\n\nconst ErrorMessage:React.FC<ErrorMessageProps> = ({loading, errorMessage, error}) => {\n    const classes = useStyles();\n\n    return (\n        <Typography variant={'body1'} component={'div'}>\n            <Box className={classes.errorMessage} height={40}>\n                {   loading ?\n                        <CircularProgress color=\"primary\" /> :\n                        error && errorMessage ?\n                            errorMessage :\n                            ' '\n                }\n            </Box>\n        </Typography>\n    )\n};\n\nexport default ErrorMessage","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport LoginCommon from \"./commons/login-common\";\nimport {Box, CircularProgress, Divider, Grid, TextField, Typography} from \"@material-ui/core\";\nimport FormButton from \"../commons/form-button\";\nimport {Link} from \"react-router-dom\";\nimport useInputField from \"../../utils/use-input-field\";\nimport {emailValidator, passwordValidator} from \"../../utils/validators\";\nimport useLogin from \"../../requests/useLogin\";\nimport ErrorMessage from \"./commons/error-message\";\n\nconst useStyles = makeStyles((theme) => ({\n    textField: {\n        width: '100%',\n        fontWeight: 700\n    },\n    link: {\n        fontWeight: 700,\n        '& a:link': {\n            color: theme.palette.primary.main\n        },\n        '& a:visited': {\n            color: theme.palette.primary.main\n        },\n        '& a:hover': {\n            color: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface LoginProps {\n\n}\n\nconst Login: React.FC<LoginProps> = () => {\n    const classes = useStyles();\n    const [email, setEmail, emailError, emailErrorMessage, validateEmail] = useInputField('', emailValidator);\n    const [password, setPassword, passwordError, passwordErrorMessage, validatePassword] = useInputField('', passwordValidator);\n\n    const [loading, error, errorMessage, login] = useLogin();\n\n    const submitHandler = () => {\n        login(email, password, [validateEmail, validatePassword])\n    };\n\n    return (\n        <LoginCommon imageUrl={'/images/login_bg.jpg'}>\n            <Grid container spacing={3}>\n\n                <Grid item xs={12}>\n                    <Typography variant={'h1'} component={'h1'} color={\"textPrimary\"}>\n                        <Box textAlign={'center'}>\n                            Log in\n                        </Box>\n                    </Typography>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            error={emailError}\n                            label=\"Email\"\n                            name=\"email\"\n                            value={email}\n                            onChange={setEmail}\n                            variant=\"outlined\"\n                            helperText={emailError ? emailErrorMessage: ' '}\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            error={passwordError}\n                            type=\"password\"\n                            label=\"Password\"\n                            value={password}\n                            onChange={setPassword}\n                            variant=\"outlined\"\n                            helperText={passwordError ? passwordErrorMessage : ' '}\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <FormButton text={'Log me in!'} onClick={submitHandler} disabled={loading}/>\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <ErrorMessage loading={loading} error={error} errorMessage={errorMessage}/>\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Divider />\n                </Grid>\n\n                <Grid item xs={12} className={classes.link}>\n                    <Grid container justify={'center'}>\n                        <Link to={'/register'}>\n                            Need an account?\n                        </Link>\n                    </Grid>\n                </Grid>\n\n            </Grid>\n        </LoginCommon>\n    )\n\n};\n\nexport default Login","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Box, Divider, Grid, TextField, Typography} from \"@material-ui/core\";\nimport FormButton from \"../commons/form-button\";\nimport {Link} from \"react-router-dom\";\nimport LoginCommon from \"./commons/login-common\";\n\nconst useStyles = makeStyles((theme) => ({\n    textField: {\n        width: '100%',\n        fontWeight: 700\n    },\n    link: {\n        fontWeight: 700,\n        '& a:link': {\n            color: theme.palette.primary.main\n        },\n        '& a:visited': {\n            color: theme.palette.primary.main\n        },\n        '& a:hover': {\n            color: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface RegisterProps {\n\n}\n\nconst Register: React.FC<RegisterProps> = () => {\n    const classes = useStyles();\n\n    return (\n        <LoginCommon imageUrl={'/images/register_bg.jpg'}>\n            <Grid container spacing={5}>\n                <Grid item xs={12}>\n                    <Typography variant={'h1'} component={'h1'} color={\"textPrimary\"}>\n                        <Box textAlign={'center'}>\n                            Join Us\n                        </Box>\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            label=\"Username\"\n                            value={''}\n                            // onChange={handleChange}\n                            variant=\"outlined\"\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            label=\"Email\"\n                            value={''}\n                            // onChange={handleChange}\n                            variant=\"outlined\"\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            label=\"Password\"\n                            value={''}\n                            // onChange={handleChange}\n                            variant=\"outlined\"\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Grid container justify={'center'}>\n                        <TextField\n                            label=\"Confirm Password\"\n                            value={''}\n                            // onChange={handleChange}\n                            variant=\"outlined\"\n                            className={classes.textField}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container justify={'center'}>\n                        <FormButton text={'I\\'m in!'} onClick={() => false} disabled={false}/>\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <Divider />\n                </Grid>\n                <Grid item xs={12} className={classes.link}>\n                    <Grid container justify={'center'}>\n                        <Link to={'/login'}>\n                            Already have an account?\n                        </Link>\n                    </Grid>\n                </Grid>\n\n            </Grid>\n        </LoginCommon>\n    )\n};\n\nexport default Register","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Button as MuiButton} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        backgroundColor: 'rgba(255,255,255,0.3)',\n        color: '#fff',\n        fontWeight: 700,\n        textTransform: 'capitalize',\n        letterSpacing: 'inherit',\n        borderBottom: '2px solid rgba(0,0,0,0.1)',\n        borderRadius: '5px',\n        // margin: '0 4px',\n        padding: '4px 10px',\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main\n        }\n    }\n}));\n\ninterface ButtonProps {\n    text: string,\n    url?: string,\n    onClick?: () => void\n}\n\nconst ThemeButton: React.FC<ButtonProps> = ({text, url, onClick}) => {\n    const classes = useStyles();\n\n    if (url) {\n        return (\n            <MuiButton variant=\"contained\" classes={{root: classes.button}} disableElevation component={Link} to={url}>\n                { text }\n            </MuiButton>\n        )\n    } else {\n        return (\n            <MuiButton variant=\"contained\" classes={{root: classes.button}} disableElevation onClick={onClick}>\n                { text }\n            </MuiButton>\n        )\n    }\n};\n\nexport default ThemeButton\n","import ThemeButton from \"../commons/theme-button\";\nimport React from \"react\";\nimport {Box, Grid, Typography} from \"@material-ui/core\";\n\ninterface LoggedInUserPanelProps {\n    logout: () => void,\n    username: string\n}\n\nconst LoggedInUserPanel: React.FC<LoggedInUserPanelProps> = ({logout, username}) => {\n    return (\n        <Grid container alignItems={\"center\"} justify={\"center\"} spacing={1}>\n            <Grid item>\n                <Typography>\n                    <Box>\n                        { username }\n                    </Box>\n                </Typography>\n            </Grid>\n            <Grid item>\n                <ThemeButton text={'Logout'} onClick={logout}/>\n            </Grid>\n        </Grid>\n    )\n};\n\nexport default LoggedInUserPanel","import ThemeButton from \"../commons/theme-button\";\nimport React from \"react\";\nimport {Grid} from \"@material-ui/core\";\n\nconst AnonymousUserPanel: React.FC = () => {\n    return (\n        <Grid container alignItems={\"center\"} justify={\"center\"} spacing={1}>\n            <Grid item>\n                <ThemeButton text={'Join'} url={'/register'}/>\n            </Grid>\n            <Grid item>\n                <ThemeButton text={'Login'} url={'/login'}/>\n            </Grid>\n        </Grid>\n    )\n};\n\nexport default AnonymousUserPanel","import React, {useContext} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Box, Grid, Typography} from \"@material-ui/core\";\nimport ThemeButton from \"../commons/theme-button\";\nimport {Link} from \"react-router-dom\";\nimport LoggedInUserPanel from \"./logged-in-user-panel\";\nimport AnonymousUserPanel from \"./anonymous-user-panel\";\n\ninterface HeaderProps {\n    isLogin: boolean,\n    username: string,\n    logout: () => void\n}\n\nconst useStyles = makeStyles((theme) => ({\n    headerDimension: {\n        width: '100%',\n        height: '80px',\n    },\n    root: {\n        backgroundColor: theme.palette.primary.main,\n        position: 'fixed',\n        left: 0,\n        top: 0,\n        color: theme.palette.primary.contrastText\n    },\n    placeholder: {\n        position: 'relative',\n    },\n    button: {\n        backgroundColor: 'rgba(255,255,255,0.5)',\n        color: '#fff',\n        fontWeight: 700,\n        textTransform: 'capitalize',\n        '&:hover': {\n            backgroundColor: theme.palette.secondary.main\n        }\n    }\n}));\n\n\nconst Header: React.FC<HeaderProps> = ({isLogin, username, logout}) => {\n    const classes = useStyles();\n\n    return (\n        <div className={`${classes.placeholder} ${classes.headerDimension}`}>\n            <Grid container alignItems={\"center\"} justify={\"center\"} className={`${classes.root} ${classes.headerDimension}`}>\n                <Grid item xs={6} md={4}>\n                    <Link to={'/'}>\n                        <Typography variant={'h1'} component={'h1'}>\n                            <Box fontWeight={700} textAlign={\"center\"}>\n                                Blog | XiaoxiHome\n                            </Box>\n                        </Typography>\n                    </Link>\n                </Grid>\n                <Grid item xs={1} md={4}>\n\n                </Grid>\n                <Grid item xs={5} md={4}>\n                    {\n                        isLogin ?\n                            <LoggedInUserPanel logout={logout} username={username}/> :\n                            <AnonymousUserPanel />\n                    }\n                </Grid>\n            </Grid>\n        </div>\n    )\n};\n\n\n\nexport default Header;\n","import {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport Header from \"../components/header/header\";\nimport {State} from \"../redux/state\";\nimport {logout} from \"../redux/actions/login-status\";\n\nfunction mapStateToProps(state: State) {\n    return {\n        isLogin: state.loginStatus.isLogin,\n        username: state.loginStatus.username\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        logout: () => dispatch(logout())\n    }\n}\n\nconst HeaderContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Header);\n\nexport default HeaderContainer;\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport configureStore from \"./redux/configure-store\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport {makeStyles, ThemeProvider} from '@material-ui/core/styles';\nimport theme from './theme';\nimport Header from \"./components/header/header\";\nimport PostList from \"./components/post-list/post-list\";\nimport Login from \"./components/login/login\";\nimport Register from \"./components/login/register\";\nimport HeaderContainer from \"./containers/header-container\";\n\nconst store = configureStore();\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: '100vw',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'flex-start'\n    },\n    widthWrapper: {\n        width: '1000px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        [theme.breakpoints.down('sm')]: {\n            width: '100%',\n        }\n    }\n}));\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <Provider store={store}>\n        <ThemeProvider theme={theme}>\n        <CssBaseline />\n            <div className={classes.root}>\n                <Router basename={process.env.PUBLIC_URL}>\n                <HeaderContainer />\n                    <div className={classes.widthWrapper}>\n                        <Switch>\n                            <Route path=\"/\" exact render={ () => <PostList /> } />\n                            <Route path=\"/login\" render={ () => <Login /> } />\n                            <Route path=\"/register\" render={ () => <Register /> } />\n                        </Switch>\n                    </div>\n                </Router>\n            </div>\n        </ThemeProvider>\n        </Provider>\n    )\n};\n\n\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducers from \"./reducers/root-reducers\";\nimport {defaultState} from \"./state\";\n// import rootReducers from \"./reducers/root-reducers\";\n\n// import { createLogger } from 'redux-logger'\n// const loggerMiddleware = createLogger();\n\n\nexport default function configureStore() {\n    return createStore(\n        rootReducers,\n        defaultState,\n        // applyMiddleware(thunkMiddleware)\n        // applyMiddleware(thunkMiddleware, loggerMiddleware)\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}